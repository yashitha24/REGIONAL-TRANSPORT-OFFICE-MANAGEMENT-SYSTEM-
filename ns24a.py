# -*- coding: utf-8 -*-
"""NS24A.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tYyzbzHYlvMOwSYM0Jp8foI8N7ShBXz-
"""

# NS24A.py CS5172/6072 cheng 2022
# implements NetMF (Algorithm 3 of the NetMF paper)
# which is an approximation to DeepWalk, which is a node embedding algorithm
# the formula is also (3.14) of the Hamilton book
# assuming T = b = 1
# three scatter plots are generated for the embeddings in 2D or 4D
# Usage: python NS24A.py

import numpy as np
import networkx as nx
import numpy.linalg as la
import matplotlib.pyplot as plt

G = nx.read_edgelist('roads.txt', data=[('length', int), ('name', str)])
A = nx.to_numpy_array(G)
C = np.loadtxt('roadNodeState.txt', delimiter=' ', dtype=str)
state = {}
for c in C:
    if c[1] == 'Ohio':
        state.update({c[0]: 0})
    elif c[1] == 'Kentucky':
        state.update({c[0]: 1})
    else:
        state.update({c[0]: 2})

truth = [state.get(v) for v in G]
one = np.ones(len(A))
d = np.matmul(one, A)
d2 = 1.0 / d
D2 = np.diag(d2)
P = np.matmul(D2, A)
T = 3
b = 1
sumP = 0
for i in range(T):
    sumP += la.matrix_power(P, i)
volG = sum(d)
M = np.matmul(sumP, D2) * volG / (T * b)
M2 = np.maximum(M, 1)
logM2 = np.log(M2)
u, s, v = la.svd(logM2)
s2 = np.sqrt(s)
embedding = np.matmul(u[:, :4], np.diag(s2[:4]))

plt.scatter(embedding[:, 0], embedding[:, 1], c=truth)
plt.show()
plt.scatter(embedding[:, 2], embedding[:, 3], c=truth)
plt.show()
plt.scatter(embedding[:, 1], embedding[:, 2], c=truth)
plt.show()